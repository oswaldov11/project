(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = [] ;;

    let close (exp : expr) (env : env) : value = Closure (exp, env) ;;

    let lookup (env : env) (varname : varid) : value =
      !(List.assoc varname env) ;;

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      try 
        let _search = lookup env varname in
        List.map (fun (var, value) ->
          if var = varname then (var, loc)
          else (var, value)) env
      with 
        Not_found -> (varname, loc) :: env ;;

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val exp -> exp_to_concrete_string exp
      | Closure (exp, env) ->
        if printenvp then env_to_string env ^ exp_to_concrete_string exp
        else exp_to_concrete_string exp

    and env_to_string (env : env) : string =
      match env with
      | [] -> ""
      | (varid, valref) :: tl ->
        varid ^ " = " ^ value_to_string !valref ^ "\n" ^ env_to_string tl ;;
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an enviornment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* Auxiliary evaluation functions *)

let eval_unop (u : unop) (Env.Val v : Env.value) : Env.value =
  match u, v with
  | Negate, Num x -> Env.Val (Num (~-x))
  | Fnegate, Float x -> Env.Val (Float (~-.x))
  | _ -> raise (EvalError "Type error, unable to negate non-Num or non-Float") ;;

let eval_binop (b : binop)
               (Env.Val e1 : Env.value)
               (Env.Val e2 : Env.value)
             : Env.value =
  match b, e1, e2 with
  | Plus, Num x1, Num x2 -> Env.Val (Num (x1 + x2))
  | Fplus, Float x1, Float x2 -> Env.Val (Float (x1 +. x2))
  | Minus, Num x1, Num x2 -> Env.Val (Num (x1 - x2))
  | Fminus, Float x1, Float x2 -> Env.Val (Float (x1 -. x2))
  | Times, Num x1, Num x2 -> Env.Val (Num (x1 * x2))
  | Ftimes, Float x1, Float x2 -> Env.Val (Float (x1 *. x2))
  | Equals, Num x1, Num x2 -> Env.Val (Bool (x1 = x2))
  | Equals, Float x1, Float x2 -> Env.Val (Bool (x1 = x2))
  | LessThan, Num x1, Num x2 -> Env.Val (Bool (x1 < x2))
  | LessThan, Float x1, Float x2 -> Env.Val (Bool (x1 < x2))
  | _ -> raise (EvalError "Type error, values of type Num or Float were expected") ;;

let get_value (Env.Val v : Env.value) = v ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
   
let rec eval_s (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Var x -> raise (EvalError ("Unbound value " ^ x))
  | Num _ | Float _ | Bool _ | Fun _ | Unassigned -> Env.Val exp
  | Unop (u, e) -> eval_unop u (eval_s e env)
  | Binop (b, e1, e2) -> eval_binop b (eval_s e1 env) (eval_s e2 env)
  | Conditional (e1, e2, e3) ->
    if eval_s e1 env = Env.Val (Bool true) then eval_s e2 env else eval_s e3 env
  | Let (x, e1, e2) -> eval_s (subst x (get_value (eval_s e1 env)) e2) env
  | Letrec (x, e1, e2) ->
    eval_s (subst x (subst x (Letrec (x, e1, Var x)) e1) e2) env
  | Raise -> raise EvalException
  | App (e1, e2) ->
    match eval_s e1 env with
    | Env.Val Fun (x, e) -> eval_s (subst x (get_value (eval_s e2 env)) e) env
    | _ ->
      raise (EvalError "Function expected, unable to perform application")
;;
     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
let rec eval_d (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Var x ->
    (try
      match Env.lookup env x with
      | Env.Val e -> Env.Val e
      | Env.Closure (e, env') -> eval_d e env'
    with
      Not_found -> raise (EvalError ("Unbound value " ^ x)))
  | Num _ | Float _ | Bool _ | Unassigned -> Env.Val exp
  | Unop (u, e) -> eval_unop u (eval_d e env)
  | Binop (b, e1, e2) -> eval_binop b (eval_d e1 env) (eval_d e2 env)
  | Conditional (e1, e2, e3) ->
    if eval_d e1 env = Env.Val (Bool true) then eval_d e2 env else eval_d e3 env
  | Fun _ -> Env.close exp (Env.empty ())
  | Let (x, e1, e2) -> eval_d e2 (Env.extend env x (ref (eval_d e1 env)))
  | Letrec (x, e1, e2) ->
    let value = ref (Env.Val Unassigned) in
    let new_env = Env.extend env x value in
    value := Env.close (get_value (eval_d e1 new_env)) env;
    eval_d e2 new_env
  | Raise -> raise EvalException
  | App (e1, e2) ->
    match eval_d e1 env with
    | Env.Closure (Fun (x, e), _) ->
      eval_d e (Env.extend env x (ref (eval_d e2 env)))
    | _ -> raise (EvalError "Function expected, unable to perform application")
;;
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let eval_l (_exp : expr) (_env : Env.env) : Env.value =
  failwith "eval_l not implemented" ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, evaluate is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the evaluate function, so it doesn't matter how it's set
   when you submit your solution.) *)
   
let evaluate = eval_s ;;
